parameter (or :parameter (pair :initiate %Initiate (nat %iRefundTime) (pair (bytes %iHashedSecret) (address %iParticipant))) (or (pair :redeem %Redeem (bytes %redeemSecret) (bytes %redeemHashedSecret)) (bytes %Refund)));
storage (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator)))))))))));
code { DUP ;
       DIP { CDR @storage_slash_1 } ;
       CAR @parameter_slash_2 ;
       LAMBDA @transfer address (pair (lambda (pair mumav address) (list operation)) address) { RENAME @address_slash_20 ; LAMBDA (pair mumav address) (list operation) { RENAME @closure_env_slash_21 ; DUP ; CDR @address_slash_20 ; CONTRACT unit ; IF_NONE { NIL operation }
               { NIL operation ;
                 SWAP ;
                 { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
                 CAR @amount_slash_22 ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 CONS } ; DIP { DROP } } ; PAIR } ;
       { DIP { DUP @parameter } ; SWAP } ;
       IF_LEFT { RENAME @initiate_slash_51 ;
                 LAMBDA @isInitiated bytes (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) bytes) bool) bytes) { RENAME @hashedSecret_slash_15 ; LAMBDA (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) bytes) bool { RENAME @closure_env_slash_16 ; DUP ; CAR @storage_slash_17 ; { DIP { DUP } ; SWAP } ; CDR @hashedSecret_slash_15 ; GET ; IF_NONE { PUSH bool False }
                         { DUP @swap ;
                           { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %emptied } ;
                           IF { PUSH string "hash collision" ;
                                FAILWITH }
                              { DUP @swap ;
                                { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR %state } ;
                                IF_LEFT { DROP ;
                                          PUSH bool False }
                                        { DROP ;
                                          PUSH bool True } } ;
                           DIP { DROP } } ; DIP { DROP } } ; PAIR } ;
                 LAMBDA (pair (pair :initiate (nat %iRefundTime) (pair (bytes %iHashedSecret) (address %iParticipant))) (lambda bytes (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) bytes) bool) bytes))) (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) (pair (pair :initiate (nat %iRefundTime) (pair (bytes %iHashedSecret) (address %iParticipant))) (lambda bytes (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) bytes) bool) bytes)))) (pair (list operation) (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))))) (pair (pair :initiate (nat %iRefundTime) (pair (bytes %iHashedSecret) (address %iParticipant))) (lambda bytes (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) bytes) bool) bytes)))) { RENAME @closure_env_slash_25 ; DUP ; CDR @isInitiated_slash_19 ; SWAP ; CAR @initiate_slash_26 ; PAIR ; LAMBDA (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) (pair (pair :initiate (nat %iRefundTime) (pair (bytes %iHashedSecret) (address %iParticipant))) (lambda bytes (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) bytes) bool) bytes)))) (pair (list operation) (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator)))))))))))) { RENAME @closure_env_slash_27 ; DUP ; { CDR ; CDR @isInitiated_slash_19 } ; { DIP { DUP } ; SWAP } ; { CDR ; CAR @initiate_slash_26 } ; { CDR ; CAR %iHashedSecret } ; EXEC ; { DIP { DUP } ; SWAP } ; CAR @storage_slash_28 ; DIP { DUP ; CAR ; SWAP ; CDR } ; PAIR ; EXEC ; IF { PUSH string "contract is already initiated" ;
                      FAILWITH }
                    { UNIT } ; DROP ; DUP ; CAR @storage_slash_28 ; PUSH (or :state (unit %Empty) (unit %Initiator)) (Right Unit) ; PUSH bool False ; PAIR %emptied %state ; AMOUNT ; PAIR %value ; { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ; { CDR ; CAR @initiate_slash_26 } ; { CDR ; CDR %iParticipant } ; PAIR %participant ; SENDER ; PAIR %initiator ; NONE bytes ; PAIR %secret ; { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ; { CDR ; CAR @initiate_slash_26 } ; { CDR ; CAR %iHashedSecret } ; PAIR %hashedSecret ; { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ; { CDR ; CAR @initiate_slash_26 } ; CAR %iRefundTime ; PAIR %refundTime ; NOW ; PAIR @newSwap %initTimestamp ; { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ; { CDR ; CAR @initiate_slash_26 } ; { CDR ; CAR %iHashedSecret } ; DIP { SOME } ; DIP { DIP { DIP { DROP } } } ; UPDATE @storage ; NIL operation ; PAIR } ; PAIR } ;
                 PAIR @doInitiate ;
                 { DIP { DUP @initiate } ; SWAP } ;
                 DIP { DUP ; CAR ; SWAP ; CDR } ;
                 PAIR ;
                 EXEC ;
                 { DIP { { DIP { { DIP { { DIP { DUP @storage } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                 DIP { DUP ; CAR ; SWAP ; CDR } ;
                 DIP { DIP { DIP { DROP } } } ;
                 PAIR ;
                 EXEC }
               { IF_LEFT { RENAME @redeem_slash_52 ;
                           { DIP { DUP @transfer } ; SWAP } ;
                           LAMBDA @isRedeemable bytes (pair (lambda (pair bytes bytes) (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) (pair bytes bytes)) bool) (pair bytes bytes))) bytes) { RENAME @hashedSecret_slash_8 ; LAMBDA (pair bytes bytes) (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) (pair bytes bytes)) bool) (pair bytes bytes)) { RENAME @closure_env_slash_9 ; DUP ; CAR @secret_slash_10 ; SWAP ; CDR @hashedSecret_slash_8 ; PAIR ; LAMBDA (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) (pair bytes bytes)) bool { RENAME @closure_env_slash_11 ; DUP ; CAR @storage_slash_12 ; { DIP { DUP } ; SWAP } ; { CDR ; CAR @hashedSecret_slash_8 } ; GET ; IF_NONE { PUSH bool True }
                                   { PUSH nat 32 ;
                                     { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
                                     { CDR ; CDR @secret_slash_10 } ;
                                     SIZE ;
                                     COMPARE ;
                                     NEQ ;
                                     IF { PUSH string "secret size is not correct" ;
                                          FAILWITH }
                                        { { DIP { DUP } ; SWAP } ;
                                          { CDR ; CAR @hashedSecret_slash_8 } ;
                                          { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
                                          { CDR ; CDR @secret_slash_10 } ;
                                          SHA256 ;
                                          COMPARE ;
                                          NEQ ;
                                          IF { PUSH string "secret is not correct" ;
                                               FAILWITH }
                                             { DUP @swap ;
                                               { CDR ; CAR %refundTime } ;
                                               INT ;
                                               { DIP { DUP @swap } ; SWAP } ;
                                               CAR %initTimestamp ;
                                               ADD ;
                                               NOW ;
                                               COMPARE ;
                                               GE ;
                                               IF { PUSH string "refundTime has already come" ;
                                                    FAILWITH }
                                                  { DUP @swap ;
                                                    { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %emptied } ;
                                                    IF { PUSH string "contract is already emptied" ;
                                                         FAILWITH }
                                                       { PUSH bool True } } } } ;
                                     DIP { DROP } } ; DIP { DROP } } ; PAIR } ; PAIR } ;
                           PAIR ;
                           LAMBDA (pair (pair :redeem (bytes %redeemSecret) (bytes %redeemHashedSecret)) (pair (lambda bytes (pair (lambda (pair bytes bytes) (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) (pair bytes bytes)) bool) (pair bytes bytes))) bytes)) (lambda address (pair (lambda (pair mumav address) (list operation)) address)))) (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) (pair (lambda bytes (pair (lambda (pair bytes bytes) (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) (pair bytes bytes)) bool) (pair bytes bytes))) bytes)) (pair (pair :redeem (bytes %redeemSecret) (bytes %redeemHashedSecret)) (lambda address (pair (lambda (pair mumav address) (list operation)) address))))) (pair (list operation) (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))))) (pair (lambda bytes (pair (lambda (pair bytes bytes) (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) (pair bytes bytes)) bool) (pair bytes bytes))) bytes)) (pair (pair :redeem (bytes %redeemSecret) (bytes %redeemHashedSecret)) (lambda address (pair (lambda (pair mumav address) (list operation)) address))))) { RENAME @closure_env_slash_32 ; DUP ; { CDR ; CDR @transfer_slash_24 } ; { DIP { DUP } ; SWAP } ; CAR @redeem_slash_33 ; PAIR ; SWAP ; { CDR ; CAR @isRedeemable_slash_14 } ; PAIR ; LAMBDA (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) (pair (lambda bytes (pair (lambda (pair bytes bytes) (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) (pair bytes bytes)) bool) (pair bytes bytes))) bytes)) (pair (pair :redeem (bytes %redeemSecret) (bytes %redeemHashedSecret)) (lambda address (pair (lambda (pair mumav address) (list operation)) address))))) (pair (list operation) (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator)))))))))))) { RENAME @closure_env_slash_34 ; DUP ; { CDR ; CAR @isRedeemable_slash_14 } ; { DIP { DUP } ; SWAP } ; { CDR ; CDR ; CAR @redeem_slash_33 } ; CDR %redeemHashedSecret ; EXEC ; { DIP { DUP } ; SWAP } ; { CDR ; CDR ; CAR @redeem_slash_33 } ; CAR %redeemSecret ; DIP { DUP ; CAR ; SWAP ; CDR } ; PAIR ; EXEC ; { DIP { DUP } ; SWAP } ; CAR @storage_slash_35 ; DIP { DUP ; CAR ; SWAP ; CDR } ; PAIR ; EXEC ; NOT ; IF { UNIT ;
                                FAILWITH }
                              { UNIT } ; DROP ; DUP ; CAR @storage_slash_35 ; { DIP { DUP } ; SWAP } ; { CDR ; CDR ; CAR @redeem_slash_33 } ; CDR %redeemHashedSecret ; GET ; IF_NONE { DUP ;
                                     CAR @storage_slash_35 ;
                                     NIL operation ;
                                     PAIR }
                                   { DUP @swap ;
                                     DUP ;
                                     CAR %initTimestamp ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %refundTime ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %hashedSecret ;
                                     SWAP ;
                                     CDR ;
                                     CDR ;
                                     { DIP { { DIP { { DIP { { DIP { { DIP { DUP } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                     { CDR ; CDR ; CAR @redeem_slash_33 } ;
                                     CAR %redeemSecret ;
                                     SOME ;
                                     PAIR %secret ;
                                     SWAP ;
                                     PAIR %hashedSecret ;
                                     SWAP ;
                                     PAIR %refundTime ;
                                     SWAP ;
                                     PAIR @swap %initTimestamp ;
                                     DUP ;
                                     CAR %initTimestamp ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %refundTime ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %hashedSecret ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %secret ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %initiator ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %participant ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %value ;
                                     SWAP ;
                                     CDR ;
                                     CDR %state ;
                                     PUSH bool True ;
                                     PAIR %emptied %state ;
                                     SWAP ;
                                     PAIR %value ;
                                     SWAP ;
                                     PAIR %participant ;
                                     SWAP ;
                                     PAIR %initiator ;
                                     SWAP ;
                                     PAIR %secret ;
                                     SWAP ;
                                     PAIR %hashedSecret ;
                                     SWAP ;
                                     PAIR %refundTime ;
                                     SWAP ;
                                     PAIR @swap %initTimestamp ;
                                     { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
                                     CAR @storage_slash_35 ;
                                     { DIP { DUP @swap } ; SWAP } ;
                                     { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } ;
                                     { CDR ; CDR ; CAR %hashedSecret } ;
                                     DIP { SOME } ;
                                     UPDATE @storage ;
                                     { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } ;
                                     { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR %state } ;
                                     IF_LEFT { DROP ;
                                               NIL operation }
                                             { DROP ;
                                               { DIP { { DIP { { DIP { DUP } ; SWAP } } ; SWAP } } ; SWAP } ;
                                               { CDR ; CDR ; CDR @transfer_slash_24 } ;
                                               { DIP { { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } } ; SWAP } ;
                                               { CDR ; CDR ; CDR ; CDR ; CDR ; CAR %participant } ;
                                               EXEC ;
                                               { DIP { { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } } ; SWAP } ;
                                               { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %value } ;
                                               DIP { DUP ; CAR ; SWAP ; CDR } ;
                                               PAIR ;
                                               EXEC } ;
                                     DIP { DIP { DROP ; DROP } } ;
                                     RENAME @u ;
                                     PAIR } ; DIP { DROP } } ; PAIR } ;
                           PAIR @doRedeem ;
                           { DIP { DUP @redeem } ; SWAP } ;
                           DIP { DUP ; CAR ; SWAP ; CDR } ;
                           PAIR ;
                           EXEC ;
                           { DIP { { DIP { { DIP { { DIP { DUP @storage } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                           DIP { DUP ; CAR ; SWAP ; CDR } ;
                           DIP { DIP { DIP { DROP } } } ;
                           PAIR ;
                           EXEC }
                         { RENAME @hashedSecret_slash_53 ;
                           { DIP { DUP @transfer } ; SWAP } ;
                           LAMBDA @isRefundable bytes (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) bytes) bool) bytes) { RENAME @hashedSecret_slash_3 ; LAMBDA (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) bytes) bool { RENAME @closure_env_slash_4 ; DUP ; CAR @storage_slash_5 ; { DIP { DUP } ; SWAP } ; CDR @hashedSecret_slash_3 ; GET ; IF_NONE { PUSH bool False }
                                   { DUP @swap ;
                                     { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %emptied } ;
                                     IF { PUSH string "contract is emptied" ;
                                          FAILWITH }
                                        { DUP @swap ;
                                          { CDR ; CAR %refundTime } ;
                                          INT ;
                                          { DIP { DUP @swap } ; SWAP } ;
                                          CAR %initTimestamp ;
                                          ADD ;
                                          NOW ;
                                          COMPARE ;
                                          LT ;
                                          IF { PUSH string "refundTime has not come" ;
                                               FAILWITH }
                                             { PUSH bool True } } ;
                                     DIP { DROP } } ; DIP { DROP } } ; PAIR } ;
                           PAIR ;
                           LAMBDA (pair bytes (pair (lambda bytes (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) bytes) bool) bytes)) (lambda address (pair (lambda (pair mumav address) (list operation)) address)))) (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) (pair bytes (pair (lambda bytes (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) bytes) bool) bytes)) (lambda address (pair (lambda (pair mumav address) (list operation)) address))))) (pair (list operation) (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))))) (pair bytes (pair (lambda bytes (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) bytes) bool) bytes)) (lambda address (pair (lambda (pair mumav address) (list operation)) address))))) { RENAME @closure_env_slash_42 ; DUP ; { CDR ; CDR @transfer_slash_24 } ; { DIP { DUP } ; SWAP } ; { CDR ; CAR @isRefundable_slash_7 } ; PAIR ; SWAP ; CAR @hashedSecret_slash_43 ; PAIR ; LAMBDA (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) (pair bytes (pair (lambda bytes (pair (lambda (pair (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator))))))))))) bytes) bool) bytes)) (lambda address (pair (lambda (pair mumav address) (list operation)) address))))) (pair (list operation) (map bytes (pair :swap (timestamp %initTimestamp) (pair (nat %refundTime) (pair (bytes %hashedSecret) (pair (option %secret bytes) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (bool %emptied) (or :state %state (unit %Empty) (unit %Initiator)))))))))))) { RENAME @closure_env_slash_44 ; DUP ; { CDR ; CDR ; CAR @isRefundable_slash_7 } ; { DIP { DUP } ; SWAP } ; { CDR ; CAR @hashedSecret_slash_43 } ; EXEC ; { DIP { DUP } ; SWAP } ; CAR @storage_slash_45 ; DIP { DUP ; CAR ; SWAP ; CDR } ; PAIR ; EXEC ; NOT ; IF { UNIT ;
                                FAILWITH }
                              { UNIT } ; DROP ; DUP ; CAR @storage_slash_45 ; { DIP { DUP } ; SWAP } ; { CDR ; CAR @hashedSecret_slash_43 } ; GET ; IF_NONE { DUP ;
                                     CAR @storage_slash_45 ;
                                     NIL operation ;
                                     PAIR }
                                   { DUP @swap ;
                                     DUP ;
                                     CAR %initTimestamp ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %refundTime ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %hashedSecret ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %secret ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %initiator ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %participant ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %value ;
                                     SWAP ;
                                     CDR ;
                                     CDR %state ;
                                     PUSH bool True ;
                                     PAIR %emptied %state ;
                                     SWAP ;
                                     PAIR %value ;
                                     SWAP ;
                                     PAIR %participant ;
                                     SWAP ;
                                     PAIR %initiator ;
                                     SWAP ;
                                     PAIR %secret ;
                                     SWAP ;
                                     PAIR %hashedSecret ;
                                     SWAP ;
                                     PAIR %refundTime ;
                                     SWAP ;
                                     PAIR @swap %initTimestamp ;
                                     { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
                                     CAR @storage_slash_45 ;
                                     { DIP { DUP @swap } ; SWAP } ;
                                     { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } ;
                                     { CDR ; CDR ; CAR %hashedSecret } ;
                                     DIP { SOME } ;
                                     UPDATE @storage ;
                                     { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } ;
                                     { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR %state } ;
                                     IF_LEFT { DROP ;
                                               NIL operation }
                                             { DROP ;
                                               { DIP { { DIP { { DIP { DUP } ; SWAP } } ; SWAP } } ; SWAP } ;
                                               { CDR ; CDR ; CDR @transfer_slash_24 } ;
                                               { DIP { { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } } ; SWAP } ;
                                               { CDR ; CDR ; CDR ; CDR ; CAR %initiator } ;
                                               EXEC ;
                                               { DIP { { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } } ; SWAP } ;
                                               { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %value } ;
                                               DIP { DUP ; CAR ; SWAP ; CDR } ;
                                               PAIR ;
                                               EXEC } ;
                                     DIP { DIP { DROP ; DROP } } ;
                                     RENAME @u ;
                                     PAIR } ; DIP { DROP } } ; PAIR } ;
                           PAIR @doRefund ;
                           { DIP { DUP @hashedSecret } ; SWAP } ;
                           DIP { DUP ; CAR ; SWAP ; CDR } ;
                           PAIR ;
                           EXEC ;
                           { DIP { { DIP { { DIP { { DIP { DUP @storage } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                           DIP { DUP ; CAR ; SWAP ; CDR } ;
                           DIP { DIP { DIP { DROP } } } ;
                           PAIR ;
                           EXEC } } ;
       DIP { DROP ; DROP ; DROP } }
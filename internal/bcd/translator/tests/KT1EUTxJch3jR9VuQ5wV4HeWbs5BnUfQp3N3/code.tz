parameter (or :parameter (pair :initiate %Initiate (bytes %iHashedSecret) (pair (nat %iRefundTime) (pair (address %iParticipant) (mumav %iPayoff)))) (or (bytes %Add) (or (pair :redeem %Redeem (bytes %rHashedSecret) (bytes %rSecret)) (bytes %Refund))));
storage (pair :storage (big_map bytes (pair :swap (bytes %hashedSecret) (pair (option %secret bytes) (pair (timestamp %initTimestamp) (pair (timestamp %refundTimestamp) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (mumav %payoff) (or :state %state (unit %Initiated) (or (unit %Redeemed) (unit %Refunded)))))))))))) unit);
code { DUP ;
       DIP { CDR @storage_slash_1 } ;
       CAR @parameter_slash_2 ;
       LAMBDA @isRefundable (pair bytes (big_map bytes (pair :swap (bytes %hashedSecret) (pair (option %secret bytes) (pair (timestamp %initTimestamp) (pair (timestamp %refundTimestamp) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (mumav %payoff) (or :state %state (unit %Initiated) (or (unit %Redeemed) (unit %Refunded))))))))))))) bool { RENAME @hashedSecret_swaps_slash_3 ; DUP @hashedSecret_swaps ; CDR @swaps ; { DIP { DUP @hashedSecret_swaps } ; SWAP } ; CAR @hashedSecret ; GET ; IF_NONE { PUSH bool False }
               { DUP @swap ;
                 { CDR ; CDR ; CDR ; CAR %refundTimestamp } ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 IF { PUSH bool False }
                    { PUSH bool True } ;
                 DIP { DROP } } ; DIP { DROP } } ;
       LAMBDA @isInitiated (pair bytes (big_map bytes (pair :swap (bytes %hashedSecret) (pair (option %secret bytes) (pair (timestamp %initTimestamp) (pair (timestamp %refundTimestamp) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (mumav %payoff) (or :state %state (unit %Initiated) (or (unit %Redeemed) (unit %Refunded))))))))))))) bool { RENAME @hashedSecret_swaps_slash_14 ; DUP @hashedSecret_swaps ; CDR @swaps ; { DIP { DUP @hashedSecret_swaps } ; SWAP } ; CAR @hashedSecret ; GET ; IF_NONE { PUSH bool False }
               { DUP @swap ;
                 { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR %state } ;
                 IF_LEFT { DROP ;
                           PUSH bool True }
                         { IF_LEFT { DROP ;
                                     PUSH string "swap for this hash is already redeemed" ;
                                     FAILWITH }
                                   { DROP ;
                                     PUSH string "swap for this hash is already refunded" ;
                                     FAILWITH } } ;
                 DIP { DROP } } ; DIP { DROP } } ;
       LAMBDA @transfer (pair address mumav) (list operation) { RENAME @address_amount_slash_19 ; DUP @address_amount ; CAR @address ; CONTRACT unit ; IF_NONE { NIL operation }
               { NIL operation ;
                 SWAP ;
                 { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
                 CDR @amount ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 CONS } ; DIP { DROP } } ;
       { DIP { { DIP { { DIP { DUP @parameter } ; SWAP } } ; SWAP } } ; SWAP } ;
       IF_LEFT { RENAME @initiate_slash_68 ;
                 { DIP { { DIP { DUP @isInitiated } ; SWAP } } ; SWAP } ;
                 { DIP { { DIP { { DIP { { DIP { { DIP { { DIP { DUP @storage } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                 { DIP { { DIP { DUP @initiate } ; SWAP } } ; SWAP } ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 CAR @initiate_storage_slash_25 ;
                 CAR @initiate ;
                 { DIP { DUP } ; SWAP } ;
                 CAR @initiate_storage_slash_25 ;
                 CDR @storage ;
                 PUSH nat 32 ;
                 { DIP { { DIP { DUP @initiate } ; SWAP } } ; SWAP } ;
                 CAR %iHashedSecret ;
                 SIZE ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "hash size is not correct" ;
                      FAILWITH }
                    { UNIT } ;
                 DROP ;
                 { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
                 CDR @isInitiated_slash_18 ;
                 { DIP { DUP @storage } ; SWAP } ;
                 CAR %swaps ;
                 { DIP { { DIP { { DIP { DUP @initiate } ; SWAP } } ; SWAP } } ; SWAP } ;
                 CAR %iHashedSecret ;
                 PAIR ;
                 EXEC ;
                 IF { PUSH string "swap for this hash is already initiated" ;
                      FAILWITH }
                    { UNIT } ;
                 DROP ;
                 UNIT @nothing ;
                 { DIP { DUP @storage } ; SWAP } ;
                 CAR %swaps ;
                 PUSH (or :state (unit %Initiated) (or (unit %Redeemed) (unit %Refunded))) (Left Unit) ;
                 { DIP { { DIP { { DIP { { DIP { DUP @initiate } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                 { CDR ; CDR ; CDR %iPayoff } ;
                 PAIR %payoff %state ;
                 { DIP { { DIP { { DIP { { DIP { DUP @initiate } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                 { CDR ; CDR ; CDR %iPayoff } ;
                 AMOUNT ;
                 SUB ;
                 PAIR %value ;
                 { DIP { { DIP { { DIP { { DIP { DUP @initiate } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                 { CDR ; CDR ; CAR %iParticipant } ;
                 PAIR %participant ;
                 SENDER ;
                 PAIR %initiator ;
                 { DIP { { DIP { { DIP { { DIP { DUP @initiate } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                 { CDR ; CAR %iRefundTime } ;
                 INT ;
                 NOW ;
                 ADD ;
                 PAIR %refundTimestamp ;
                 NOW ;
                 PAIR %initTimestamp ;
                 NONE bytes ;
                 PAIR %secret ;
                 { DIP { { DIP { { DIP { { DIP { DUP @initiate } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                 CAR %iHashedSecret ;
                 PAIR @newSwap %hashedSecret ;
                 { DIP { { DIP { { DIP { { DIP { DUP @initiate } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                 CAR %iHashedSecret ;
                 DIP { SOME } ;
                 DIP { DIP { DIP { DIP { DROP ; DROP ; DROP ; DROP } } } } ;
                 UPDATE @swaps ;
                 PAIR @storage %swaps %nothing ;
                 NIL operation ;
                 PAIR }
               { IF_LEFT { RENAME @hashedSecret_slash_69 ;
                           { DIP { { DIP { { DIP { DUP @isRefundable } ; SWAP } } ; SWAP } } ; SWAP } ;
                           { DIP { { DIP { { DIP { DUP @isInitiated } ; SWAP } } ; SWAP } } ; SWAP } ;
                           PAIR ;
                           { DIP { { DIP { { DIP { { DIP { { DIP { { DIP { DUP @storage } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                           { DIP { { DIP { DUP @hashedSecret } ; SWAP } } ; SWAP } ;
                           PAIR ;
                           PAIR ;
                           DUP ;
                           CAR @hashedSecret_storage_slash_34 ;
                           CAR @hashedSecret ;
                           { DIP { DUP } ; SWAP } ;
                           CAR @hashedSecret_storage_slash_34 ;
                           CDR @storage ;
                           { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
                           { CDR ; CAR @isInitiated_slash_18 } ;
                           { DIP { DUP @storage } ; SWAP } ;
                           CAR %swaps ;
                           { DIP { { DIP { { DIP { DUP @hashedSecret } ; SWAP } } ; SWAP } } ; SWAP } ;
                           PAIR ;
                           EXEC ;
                           NOT ;
                           IF { PUSH string "hash is not found" ;
                                FAILWITH }
                              { UNIT } ;
                           DROP ;
                           { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
                           { CDR ; CDR @isRefundable_slash_7 } ;
                           { DIP { DUP @storage } ; SWAP } ;
                           CAR %swaps ;
                           { DIP { { DIP { { DIP { DUP @hashedSecret } ; SWAP } } ; SWAP } } ; SWAP } ;
                           PAIR ;
                           EXEC ;
                           IF { PUSH string "refundTime has already come" ;
                                FAILWITH }
                              { UNIT } ;
                           DROP ;
                           DUP @storage ;
                           CAR %swaps ;
                           { DIP { { DIP { DUP @hashedSecret } ; SWAP } } ; SWAP } ;
                           GET ;
                           IF_NONE { PUSH string "no swap for this hash" ;
                                     FAILWITH }
                                   { UNIT @nothing ;
                                     { DIP { { DIP { DUP @storage } ; SWAP } } ; SWAP } ;
                                     CAR %swaps ;
                                     { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } ;
                                     DUP ;
                                     CAR %hashedSecret ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %secret ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %initTimestamp ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %refundTimestamp ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %initiator ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR %participant ;
                                     SWAP ;
                                     CDR ;
                                     CDR ;
                                     AMOUNT ;
                                     { DIP { { DIP { { DIP { { DIP { { DIP { { DIP { { DIP { { DIP { { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                     { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %value } ;
                                     ADD ;
                                     PAIR %value ;
                                     SWAP ;
                                     PAIR %participant ;
                                     SWAP ;
                                     PAIR %initiator ;
                                     SWAP ;
                                     PAIR %refundTimestamp ;
                                     SWAP ;
                                     PAIR %initTimestamp ;
                                     SWAP ;
                                     PAIR %secret ;
                                     SWAP ;
                                     PAIR @updatedSwap %hashedSecret ;
                                     SOME ;
                                     { DIP { { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } } ; SWAP } ;
                                     DIP { DIP { DIP { DIP { DROP } } } } ;
                                     CAR %hashedSecret ;
                                     UPDATE @swaps ;
                                     PAIR @storage %swaps %nothing ;
                                     NIL operation ;
                                     PAIR } ;
                           DIP { DROP ; DROP ; DROP ; DROP } }
                         { IF_LEFT { RENAME @redeem_slash_70 ;
                                     { DIP { DUP @transfer } ; SWAP } ;
                                     LAMBDA @isRedeemable (pair bytes (pair bytes (big_map bytes (pair :swap (bytes %hashedSecret) (pair (option %secret bytes) (pair (timestamp %initTimestamp) (pair (timestamp %refundTimestamp) (pair (address %initiator) (pair (address %participant) (pair (mumav %value) (pair (mumav %payoff) (or :state %state (unit %Initiated) (or (unit %Redeemed) (unit %Refunded)))))))))))))) bool { RENAME @hashedSecret_secret_swaps_slash_8 ; DUP @hashedSecret_secret_swaps ; CAR @hashedSecret ; { DIP { DUP @hashedSecret_secret_swaps } ; SWAP } ; { CDR ; CAR @secret } ; { DIP { { DIP { DUP @hashedSecret_secret_swaps } ; SWAP } } ; SWAP } ; { CDR ; CDR @swaps } ; { DIP { { DIP { DUP @hashedSecret } ; SWAP } } ; SWAP } ; GET ; IF_NONE { PUSH bool False }
                                             { PUSH nat 32 ;
                                               { DIP { { DIP { DUP @secret } ; SWAP } } ; SWAP } ;
                                               SIZE ;
                                               COMPARE ;
                                               NEQ ;
                                               IF { PUSH string "secret size is not correct" ;
                                                    FAILWITH }
                                                  { DUP @swap ;
                                                    { CDR ; CDR ; CDR ; CAR %refundTimestamp } ;
                                                    NOW ;
                                                    COMPARE ;
                                                    GE ;
                                                    IF { PUSH string "refundTime has already come" ;
                                                         FAILWITH }
                                                       { { DIP { { DIP { DUP @hashedSecret } ; SWAP } } ; SWAP } ;
                                                         { DIP { { DIP { DUP @secret } ; SWAP } } ; SWAP } ;
                                                         SHA256 ;
                                                         SHA256 ;
                                                         COMPARE ;
                                                         NEQ ;
                                                         IF { PUSH string "secret is not correct" ;
                                                              FAILWITH }
                                                            { PUSH bool True } } } ;
                                               DIP { DROP } } ; DIP { DROP ; DROP ; DROP } } ;
                                     PAIR ;
                                     { DIP { { DIP { { DIP { DUP @isInitiated } ; SWAP } } ; SWAP } } ; SWAP } ;
                                     PAIR ;
                                     { DIP { { DIP { { DIP { { DIP { { DIP { { DIP { DUP @storage } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                     { DIP { { DIP { DUP @redeem } ; SWAP } } ; SWAP } ;
                                     PAIR ;
                                     PAIR ;
                                     DUP ;
                                     CAR @redeem_storage_slash_44 ;
                                     CAR @redeem ;
                                     { DIP { DUP } ; SWAP } ;
                                     CAR @redeem_storage_slash_44 ;
                                     CDR @storage ;
                                     { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
                                     { CDR ; CAR @isInitiated_slash_18 } ;
                                     { DIP { DUP @storage } ; SWAP } ;
                                     CAR %swaps ;
                                     { DIP { { DIP { { DIP { DUP @redeem } ; SWAP } } ; SWAP } } ; SWAP } ;
                                     CAR %rHashedSecret ;
                                     PAIR ;
                                     EXEC ;
                                     NOT ;
                                     IF { UNIT ;
                                          FAILWITH }
                                        { UNIT } ;
                                     DROP ;
                                     { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
                                     { CDR ; CDR ; CAR @isRedeemable_slash_13 } ;
                                     { DIP { DUP @storage } ; SWAP } ;
                                     CAR %swaps ;
                                     { DIP { { DIP { { DIP { DUP @redeem } ; SWAP } } ; SWAP } } ; SWAP } ;
                                     CDR %rSecret ;
                                     PAIR ;
                                     { DIP { { DIP { { DIP { DUP @redeem } ; SWAP } } ; SWAP } } ; SWAP } ;
                                     CAR %rHashedSecret ;
                                     PAIR ;
                                     EXEC ;
                                     NOT ;
                                     IF { PUSH string "hash is not found" ;
                                          FAILWITH }
                                        { UNIT } ;
                                     DROP ;
                                     DUP @storage ;
                                     CAR %swaps ;
                                     { DIP { { DIP { DUP @redeem } ; SWAP } } ; SWAP } ;
                                     CAR %rHashedSecret ;
                                     GET ;
                                     IF_NONE { DUP @storage ;
                                               NIL operation ;
                                               PAIR }
                                             { DUP @swap ;
                                               DUP ;
                                               CAR %hashedSecret ;
                                               SWAP ;
                                               CDR ;
                                               CDR ;
                                               { DIP { { DIP { { DIP { { DIP { DUP @redeem } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                               CDR %rSecret ;
                                               SOME ;
                                               PAIR %secret ;
                                               SWAP ;
                                               PAIR @swap %hashedSecret ;
                                               DUP ;
                                               CAR %hashedSecret ;
                                               SWAP ;
                                               CDR ;
                                               DUP ;
                                               CAR %secret ;
                                               SWAP ;
                                               CDR ;
                                               DUP ;
                                               CAR %initTimestamp ;
                                               SWAP ;
                                               CDR ;
                                               DUP ;
                                               CAR %refundTimestamp ;
                                               SWAP ;
                                               CDR ;
                                               DUP ;
                                               CAR %initiator ;
                                               SWAP ;
                                               CDR ;
                                               DUP ;
                                               CAR %participant ;
                                               SWAP ;
                                               CDR ;
                                               DUP ;
                                               CAR %value ;
                                               SWAP ;
                                               CDR ;
                                               CAR %payoff ;
                                               PUSH (or :state (unit %Initiated) (or (unit %Redeemed) (unit %Refunded))) (Right (Left Unit)) ;
                                               SWAP ;
                                               PAIR %payoff %state ;
                                               SWAP ;
                                               PAIR %value ;
                                               SWAP ;
                                               PAIR %participant ;
                                               SWAP ;
                                               PAIR %initiator ;
                                               SWAP ;
                                               PAIR %refundTimestamp ;
                                               SWAP ;
                                               PAIR %initTimestamp ;
                                               SWAP ;
                                               PAIR %secret ;
                                               SWAP ;
                                               PAIR @swap %hashedSecret ;
                                               UNIT @nothing ;
                                               { DIP { { DIP { { DIP { DUP @storage } ; SWAP } } ; SWAP } } ; SWAP } ;
                                               CAR %swaps ;
                                               { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } ;
                                               { DIP { { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } } ; SWAP } ;
                                               CAR %hashedSecret ;
                                               DIP { SOME } ;
                                               UPDATE @swaps ;
                                               PAIR @storage %swaps %nothing ;
                                               { DIP { { DIP { { DIP { { DIP { { DIP { DUP } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                               { CDR ; CDR ; CDR @transfer_slash_23 } ;
                                               { DIP { { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } } ; SWAP } ;
                                               { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %payoff } ;
                                               SENDER ;
                                               PAIR ;
                                               EXEC ;
                                               IF_CONS { DIP { DROP } ;
                                                         { DIP { { DIP { { DIP { { DIP { { DIP { { DIP { DUP } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                                         { CDR ; CDR ; CDR @transfer_slash_23 } ;
                                                         { DIP { { DIP { { DIP { { DIP { DUP } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                                         { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %value } ;
                                                         { DIP { { DIP { { DIP { { DIP { { DIP { DUP } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                                         { CDR ; CDR ; CDR ; CDR ; CDR ; CAR %participant } ;
                                                         PAIR ;
                                                         EXEC ;
                                                         SWAP ;
                                                         CONS }
                                                       { { DIP { { DIP { { DIP { { DIP { { DIP { DUP } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                                         { CDR ; CDR ; CDR @transfer_slash_23 } ;
                                                         { DIP { { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } } ; SWAP } ;
                                                         { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %value } ;
                                                         { DIP { { DIP { { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                                         { CDR ; CDR ; CDR ; CDR ; CDR ; CAR %participant } ;
                                                         PAIR ;
                                                         EXEC } ;
                                               DIP { DIP { DROP ; DROP } } ;
                                               RENAME @op ;
                                               PAIR } ;
                                     DIP { DROP ; DROP ; DROP ; DROP } }
                                   { RENAME @hashedSecret_slash_71 ;
                                     { DIP { DUP @transfer } ; SWAP } ;
                                     { DIP { { DIP { { DIP { { DIP { DUP @isRefundable } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                     PAIR ;
                                     { DIP { { DIP { { DIP { DUP @isInitiated } ; SWAP } } ; SWAP } } ; SWAP } ;
                                     PAIR ;
                                     { DIP { { DIP { { DIP { { DIP { { DIP { { DIP { DUP @storage } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                     { DIP { { DIP { DUP @hashedSecret } ; SWAP } } ; SWAP } ;
                                     PAIR ;
                                     PAIR ;
                                     DUP ;
                                     CAR @hashedSecret_storage_slash_58 ;
                                     CAR @hashedSecret ;
                                     { DIP { DUP } ; SWAP } ;
                                     CAR @hashedSecret_storage_slash_58 ;
                                     CDR @storage ;
                                     { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
                                     { CDR ; CAR @isInitiated_slash_18 } ;
                                     { DIP { DUP @storage } ; SWAP } ;
                                     CAR %swaps ;
                                     { DIP { { DIP { { DIP { DUP @hashedSecret } ; SWAP } } ; SWAP } } ; SWAP } ;
                                     PAIR ;
                                     EXEC ;
                                     NOT ;
                                     IF { UNIT ;
                                          FAILWITH }
                                        { UNIT } ;
                                     DROP ;
                                     { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
                                     { CDR ; CDR ; CAR @isRefundable_slash_7 } ;
                                     { DIP { DUP @storage } ; SWAP } ;
                                     CAR %swaps ;
                                     { DIP { { DIP { { DIP { DUP @hashedSecret } ; SWAP } } ; SWAP } } ; SWAP } ;
                                     PAIR ;
                                     EXEC ;
                                     NOT ;
                                     IF { PUSH string "refundTime has not come" ;
                                          FAILWITH }
                                        { UNIT } ;
                                     DROP ;
                                     DUP @storage ;
                                     CAR %swaps ;
                                     { DIP { { DIP { DUP @hashedSecret } ; SWAP } } ; SWAP } ;
                                     GET ;
                                     IF_NONE { DUP @storage ;
                                               NIL operation ;
                                               PAIR }
                                             { DUP @swap ;
                                               DUP ;
                                               CAR %hashedSecret ;
                                               SWAP ;
                                               CDR ;
                                               DUP ;
                                               CAR %secret ;
                                               SWAP ;
                                               CDR ;
                                               DUP ;
                                               CAR %initTimestamp ;
                                               SWAP ;
                                               CDR ;
                                               DUP ;
                                               CAR %refundTimestamp ;
                                               SWAP ;
                                               CDR ;
                                               DUP ;
                                               CAR %initiator ;
                                               SWAP ;
                                               CDR ;
                                               DUP ;
                                               CAR %participant ;
                                               SWAP ;
                                               CDR ;
                                               DUP ;
                                               CAR %value ;
                                               SWAP ;
                                               CDR ;
                                               CAR %payoff ;
                                               PUSH (or :state (unit %Initiated) (or (unit %Redeemed) (unit %Refunded))) (Right (Right Unit)) ;
                                               SWAP ;
                                               PAIR %payoff %state ;
                                               SWAP ;
                                               PAIR %value ;
                                               SWAP ;
                                               PAIR %participant ;
                                               SWAP ;
                                               PAIR %initiator ;
                                               SWAP ;
                                               PAIR %refundTimestamp ;
                                               SWAP ;
                                               PAIR %initTimestamp ;
                                               SWAP ;
                                               PAIR %secret ;
                                               SWAP ;
                                               PAIR @swap %hashedSecret ;
                                               UNIT @nothing ;
                                               { DIP { { DIP { { DIP { DUP @storage } ; SWAP } } ; SWAP } } ; SWAP } ;
                                               CAR %swaps ;
                                               { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } ;
                                               { DIP { { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } } ; SWAP } ;
                                               CAR %hashedSecret ;
                                               DIP { SOME } ;
                                               UPDATE @swaps ;
                                               PAIR @storage %swaps %nothing ;
                                               { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } ;
                                               { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR %state } ;
                                               IF_LEFT { DROP ;
                                                         { DIP { { DIP { { DIP { { DIP { { DIP { DUP } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                                         { CDR ; CDR ; CDR @transfer_slash_23 } ;
                                                         { DIP { { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } } ; SWAP } ;
                                                         { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %payoff } ;
                                                         { DIP { { DIP { { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                                         { CDR ; CDR ; CDR ; CDR ; CDR ; CDR ; CAR %value } ;
                                                         ADD ;
                                                         { DIP { { DIP { { DIP { { DIP { DUP @swap } ; SWAP } } ; SWAP } } ; SWAP } } ; SWAP } ;
                                                         { CDR ; CDR ; CDR ; CDR ; CAR %initiator } ;
                                                         PAIR ;
                                                         EXEC }
                                                       { DROP ;
                                                         NIL operation } ;
                                               DIP { DIP { DROP ; DROP } } ;
                                               RENAME @op ;
                                               PAIR } ;
                                     DIP { DROP ; DROP ; DROP ; DROP } } } } ;
       DIP { DROP ; DROP ; DROP ; DROP ; DROP } }
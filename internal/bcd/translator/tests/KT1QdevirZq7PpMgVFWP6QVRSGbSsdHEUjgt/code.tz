parameter (or (or (pair :resolve (bytes :request_id) (pair (bytes :nonce) nat)) (or (bytes :trigger) (or (pair :withdraw signature (pair mumav key)) (pair :init signature (contract :redirector (pair bytes (pair bytes nat))))))) (pair :register signature (pair timestamp (pair (bytes :nonce) (pair (pair :terms (mumav :payout) (mumav :price)) (pair :params (pair :location int int) timestamp))))));
storage (pair (pair (pair (pair (key :provider_key) mumav) (bool :initialized)) (pair :contracts (contract :oracle (or (bytes :remove) (pair :register (pair (bytes :nonce) (contract :callback (pair (bytes :request_id) (pair (bytes :nonce) (nat :result))))) (pair :params (pair :location int int) timestamp)))) (contract :redirector (pair bytes (pair bytes nat))))) (map (bytes :nonce) (pair (pair (option (bytes :request_id)) (pair (pair :terms (mumav :payout) (mumav :price)) (pair :params (pair int int) timestamp))) (pair bool address))));
code { DUP ;
       { CDR ; CAR ; CAR ; CDR } ;
       IF {} { DUP ; CAR ; IF_LEFT {} { PUSH string "contract not initialized" ; FAILWITH } ; IF_LEFT { PUSH string "contract not initialized" ; FAILWITH } {} ; IF_LEFT { PUSH string "contract not initialized" ; FAILWITH } {} ; IF_LEFT { PUSH string "contract not initialized" ; FAILWITH } {} ; DUP ; CAR ; DIP { DUP ; CDR ; PACK ; BLAKE2B } ; { DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ; SWAP } ; { CDR ; CAR ; CAR ; CAR ; CAR } ; CHECK_SIGNATURE ; IF {} { PUSH string "only owner can initialize" ; FAILWITH } ; CDR ; SWAP ; { DUP ; DIP { CDR @%% ; { DUP ; DIP { CAR @%% ; { DUP ; DIP { CDR @%% ; { DUP ; CDR ; { DROP ; SWAP } ; SWAP ; CAR @%% ; PAIR %@ % } } ; CAR @%% ; PAIR %@ %@ } } ; CDR @%% ; SWAP ; PAIR %@ %@ } } ; CAR @%% ; PAIR %@ %@ } } ;
       DUP ;
       CAR ;
       IF_LEFT { IF_LEFT { { DIP { DUP } ; SWAP } ;
                           { CDR ; CAR ; CDR ; CDR } ;
                           ADDRESS ;
                           SENDER ;
                           { COMPARE ; EQ ; IF {} { PUSH string "oracle responses have to go through our proxy" ; FAILWITH } } ;
                           { DIP { DUP } ; SWAP } ;
                           { CDR ; CDR } ;
                           { DIP { DUP } ; SWAP } ;
                           DUP ;
                           DIP { { CDR ; CAR } ; GET ; { IF_NONE { PUSH string "no such policy" ; FAILWITH } {} } } ;
                           CAR ;
                           { DIP { DUP } ; SWAP } ;
                           { CAR ; CAR } ;
                           { IF_NONE { PUSH string "policy not triggered" ; FAILWITH } {} } ;
                           { COMPARE ; EQ ; IF {} { PUSH string "request ID mismatch" ; FAILWITH } } ;
                           DUP ;
                           { CAR ; CDR ; CAR ; CDR } ;
                           PUSH @safety_margin_multiplier nat 2 ;
                           MUL ;
                           SWAP ;
                           DIP { SWAP ; DIP { SWAP ; { DUP ; DIP { CDR @%% ; { DUP ; DIP { CAR @%% ; { DUP ; DIP { CAR @%% ; { DUP ; DIP { CAR @%% ; { DUP ; CDR ; { SWAP ; DIP { SUB } ; SWAP } ; SWAP ; CAR @%% ; PAIR %@ % } } ; CDR @%% ; SWAP ; PAIR %@ %@ } } ; CDR @%% ; SWAP ; PAIR %@ %@ } } ; CDR @%% ; SWAP ; PAIR %@ %@ } } ; CAR @%% ; PAIR %@ %@ } } } ;
                           DUP ;
                           DUP ;
                           { CDR ; CAR } ;
                           IF {} { PUSH string "policy not trigged" ; FAILWITH } ;
                           DIP { { CAR ; CDR ; CAR ; CAR } ; DIP { DUP ; { CDR ; CDR } } ; MUL ; PUSH nat 100 ; SWAP ; EDIV ; { IF_NONE { PUSH string "division by zero" ; FAILWITH } {} } ; CAR } ;
                           { CDR ; CDR } ;
                           SWAP ;
                           UNIT ;
                           { DIP { DIP { DIP { { DIP { DUP } ; SWAP } ; { CDR ; CDR } ; SWAP ; { CDR ; CAR } ; DIP { NONE (pair (pair (option (bytes :request_id)) (pair (pair :terms mumav mumav) (pair :params (pair int int) timestamp))) (pair bool address)) } ; UPDATE @updated ; SWAP ; { DUP ; DIP { CDR @%% ; { DUP ; CDR ; { DROP ; SWAP } ; SWAP ; CAR @%% ; PAIR %@ % } } ; CAR @%% ; PAIR %@ %@ } ; CDR } } } } ;
                           { DIP { DIP { CONTRACT unit ; { IF_NONE { PUSH string "invalid payout address" ; FAILWITH } {} } } } } ;
                           { DIP { DUP } ; SWAP } ;
                           PUSH mumav 0 ;
                           { COMPARE ; EQ } ;
                           IF { DROP ;
                                DROP ;
                                DROP ;
                                NIL operation }
                              { TRANSFER_TOKENS ;
                                NIL operation ;
                                SWAP ;
                                CONS } }
                         { IF_LEFT { DIP { CDR } ;
                                     { DIP { DUP } ; SWAP } ;
                                     CDR ;
                                     { DIP { DUP } ; SWAP } ;
                                     GET ;
                                     { IF_NONE { PUSH string "no such policy" ; FAILWITH } {} } ;
                                     DUP ;
                                     DUP ;
                                     { CDR ; CAR } ;
                                     NOT ;
                                     IF {} { PUSH string "policy already triggered" ; FAILWITH } ;
                                     { CAR ; CDR ; CDR } ;
                                     { DIP { DIP { DUP } ; SWAP } ; SWAP } ;
                                     DIP { { DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ; SWAP } ; { CAR ; CDR ; CDR } } ;
                                     PAIR ;
                                     PAIR ;
                                     DUP ;
                                     PACK ;
                                     BLAKE2B @new_request_id ;
                                     SWAP ;
                                     RIGHT bytes ;
                                     DIP { SOME @new_request_id ; SWAP ; { DUP ; DIP { CAR @%% ; { DUP ; CDR @%% ; DIP { CAR ; { DROP } } ; SWAP ; PAIR % %@ } } ; CDR @%% ; SWAP ; PAIR %@ %@ } ; { DUP ; DIP { CDR @%% ; { DUP ; CDR @%% ; DIP { CAR ; { NOT @flipped } } ; SWAP ; PAIR % %@ } } ; CAR @%% ; PAIR %@ %@ } ; SOME ; SWAP ; { DIP { DIP { DUP ; CDR } } } ; UPDATE @updated ; SWAP ; { DUP ; CDR ; { DROP ; SWAP } ; SWAP ; CAR @%% ; PAIR %@ % } ; DUP ; { CAR ; CDR ; CAR } ; PUSH mumav 1000000 } ;
                                     TRANSFER_TOKENS ;
                                     NIL operation ;
                                     SWAP ;
                                     CONS }
                                   { IF_LEFT { DUP ;
                                               CAR ;
                                               DIP { CDR ; DUP ; PACK ; BLAKE2B } ;
                                               { DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ; SWAP } ;
                                               { CDR ; CAR ; CAR ; CAR ; CAR } ;
                                               CHECK_SIGNATURE ;
                                               IF {} { PUSH string "only owner can withdraw" ; FAILWITH } ;
                                               DUP ;
                                               { DIP { DIP { DUP } ; SWAP } ; SWAP } ;
                                               { CDR ; CAR ; CAR ; CAR ; CDR } ;
                                               BALANCE ;
                                               SUB @max_withdraw ;
                                               DIP { CAR } ;
                                               { COMPARE ; GE ; IF {} { PUSH string "withdrawal over obligations limit" ; FAILWITH } } ;
                                               DUP ;
                                               CDR ;
                                               HASH_KEY ;
                                               IMPLICIT_ACCOUNT ;
                                               SWAP ;
                                               CAR ;
                                               UNIT ;
                                               { DIP { DIP { DIP { CDR } } } } ;
                                               TRANSFER_TOKENS ;
                                               NIL operation ;
                                               SWAP ;
                                               CONS }
                                             { DROP ;
                                               CDR ;
                                               { DUP ; DIP { CAR @%% ; { DUP ; DIP { CAR @%% ; { DUP ; CDR ; { NOT ; IF {} { PUSH string "already initialized" ; FAILWITH } ; PUSH bool True } ; SWAP ; CAR @%% ; PAIR %@ % } } ; CDR @%% ; SWAP ; PAIR %@ %@ } } ; CDR @%% ; SWAP ; PAIR %@ %@ } ;
                                               NIL operation } } } }
               { DUP ;
                 DUP ;
                 CAR ;
                 DIP { CDR ; PACK ; BLAKE2B } ;
                 { DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ; SWAP } ;
                 { CDR ; CAR ; CAR ; CAR ; CAR } ;
                 CHECK_SIGNATURE ;
                 IF {} { PUSH string "invalid signature" ; FAILWITH } ;
                 CDR ;
                 DUP ;
                 CAR ;
                 NOW ;
                 { COMPARE ; LE ; IF {} { PUSH string "terms out of date" ; FAILWITH } } ;
                 DUP ;
                 { CDR ; CDR ; CAR ; CDR } ;
                 DUP ;
                 AMOUNT ;
                 { COMPARE ; GE ; IF {} { PUSH string "payment too low" ; FAILWITH } } ;
                 PUSH @safety_margin_multiplier nat 2 ;
                 MUL ;
                 { DIP { DIP { DUP } ; SWAP } ; SWAP } ;
                 { CDR ; CAR ; CAR ; CAR ; CDR } ;
                 ADD ;
                 DUP ;
                 BALANCE ;
                 { COMPARE ; GE ; IF {} { PUSH string "not enough funds to cover obligations" ; FAILWITH } } ;
                 SWAP ;
                 DIP { SWAP ; { DUP ; DIP { CDR @%% ; { DUP ; DIP { CAR @%% ; { DUP ; DIP { CAR @%% ; { DUP ; DIP { CAR @%% ; { DUP ; CDR ; { DROP ; SWAP } ; SWAP ; CAR @%% ; PAIR %@ % } } ; CDR @%% ; SWAP ; PAIR %@ %@ } } ; CDR @%% ; SWAP ; PAIR %@ %@ } } ; CDR @%% ; SWAP ; PAIR %@ %@ } } ; CAR @%% ; PAIR %@ %@ } } ;
                 CDR ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 NONE bytes ;
                 PAIR ;
                 SENDER ;
                 PUSH bool False ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SOME ;
                 { DIP { DIP { CDR ; DUP ; CDR } } } ;
                 { DIP { DIP { DUP } ; SWAP } ; SWAP } ;
                 { DIP { DIP { DUP } ; SWAP } ; SWAP } ;
                 MEM ;
                 NOT ;
                 IF {} { PUSH string "policy already exists" ; FAILWITH } ;
                 SWAP ;
                 UPDATE @updated ;
                 SWAP ;
                 { DUP ; CDR ; { DROP ; SWAP } ; SWAP ; CAR @%% ; PAIR %@ % } ;
                 NIL operation } ;
       PAIR }
parameter (or (or %fund (pair %initiate (address %participant) (pair %settings (pair (bytes %hashed_secret) (timestamp %refund_time)) (mumav %payoff))) (bytes %hashed_secret)) (or %redeem_refund (bytes %secret) (bytes %hashed_secret)));
storage (pair (big_map bytes (pair (pair %recipients (address %initiator) (address %participant)) (pair %settings (pair (mumav %amount) (timestamp %refund_time)) (mumav %payoff)))) unit);
code { NIL @operations operation ;
       SWAP ;
       { { DUP ; CAR @% ; DIP { CDR } } ; DIP { { DUP ; CAR @% ; DIP { CDR @% } } } } ;
       DIP { DUP } ;
       IF_LEFT { IF_LEFT { { { DUP ; CAR @% ; DIP { CDR @% } } } ;
                           DUP ;
                           CONTRACT @participant unit ;
                           { IF_NONE { PUSH string "wrong participant address" ;
                                     FAILWITH }
                                   { DROP } } ;
                           SWAP ;
                           { { DUP ; CAR ; DIP { CDR @% } } ; { DUP ; CAR @% ; DIP { CDR @% } } } ;
                           DUP ;
                           SIZE ;
                           PUSH nat 32 ;
                           { COMPARE ; EQ ; IF {} { PUSH string "hash size is not correct" ; FAILWITH } } ;
                           DIP { DIP { DUP } ; SWAP ; AMOUNT @amount ; SUB ; SENDER ; DUP ; CONTRACT @initiator unit ; { IF_NONE { PUSH string "wrong sender address" ;
                                     FAILWITH }
                                   { DROP } } ; DIP { { PAIR ; PAIR } ; SWAP } ; { PAIR ; PAIR } ; SOME @xcat ; SWAP } ;
                           DUP ;
                           DIP { MEM ; NOT ; IF {} { PUSH string "swap for this hash is already initiated" ; FAILWITH } } }
                         { DUP ;
                           DIP { GET ; { IF_NONE { PUSH string "no swap for such hash" ; FAILWITH } {} } ; { { DUP ; CAR @% ; DIP { CDR @% } } } ; DIP { { { DUP ; CAR ; DIP { CDR @% } } ; { DUP ; CAR @% ; DIP { CDR @% } } } ; SWAP ; DUP ; NOW ; { COMPARE ; LT ; IF {} { PUSH string "refund_time has already come" ; FAILWITH } } ; SWAP ; AMOUNT @amount ; ADD } ; { DIP { PAIR } ; DIP { PAIR } ; PAIR } ; SOME @xcat } } ;
                 UPDATE ;
                 PAIR @new_storage ;
                 SWAP ;
                 PAIR }
               { IF_LEFT { DUP ;
                           SIZE ;
                           PUSH nat 32 ;
                           { COMPARE ; EQ ; IF {} { PUSH string "secret size is not correct" ; FAILWITH } } ;
                           SHA256 ;
                           SHA256 @hash ;
                           DUP ;
                           DIP { SWAP } ;
                           { DIP { DIP { GET ; { IF_NONE { PUSH string "no swap for such secret" ; FAILWITH } {} } ; DUP ; { { DUP ; CAR @% ; DIP { CDR @% } } } ; CDR @% ; CONTRACT @participant unit ; { IF_NONE { PUSH string "recipient does not exist" ; FAILWITH } {} } ; SWAP ; { CAR ; CAR @% } ; { DIP { DIP { SENDER ; CONTRACT @sender unit ; { IF_NONE { PUSH string "wrong sender address" ; FAILWITH } {} } ; SWAP ; CDR @% ; { { DUP ; CAR ; DIP { CDR @% } } ; { DUP ; CAR @% ; DIP { CDR @% } } } ; DROP ; NOW ; { COMPARE ; LT ; IF {} { PUSH string "refund_time has already come" ; FAILWITH } } ; DUP ; PUSH mumav 0 ; { COMPARE ; LT ; IF { UNIT ;
                                TRANSFER_TOKENS ;
                                DIP { SWAP } ;
                                CONS }
                              { DROP ;
                                DROP ;
                                SWAP } } } } } ; UNIT ; TRANSFER_TOKENS } } } }
                         { DUP ;
                           DIP { GET ; { IF_NONE { PUSH string "no swap for such hash" ; FAILWITH } {} } ; DUP ; { CAR ; CAR @% } ; CONTRACT @initiator unit ; { IF_NONE { PUSH string "recipient does not exist" ; FAILWITH } {} } ; SWAP ; CDR ; { { DUP ; CAR ; DIP { CDR @% } } ; { DUP ; CAR @% ; DIP { CDR @% } } } ; SWAP ; NOW ; { COMPARE ; GE ; IF {} { PUSH string "refund_time has not come" ; FAILWITH } } ; ADD ; UNIT ; TRANSFER_TOKENS ; SWAP ; { DIP { DIP { SWAP } } } } } ;
                 NONE @none (pair (pair address address) (pair (pair mumav timestamp) mumav)) ;
                 SWAP ;
                 UPDATE @cleared_map ;
                 SWAP ;
                 DIP { SWAP ; DIP { PAIR } } ;
                 CONS ;
                 PAIR } }
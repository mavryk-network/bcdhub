// Code generated by MockGen. DO NOT EDIT.
// Source: saver.go
//
// Generated by this command:
//
//	mockgen -source=saver.go -destination=mock/saver.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/mavryk-network/bcdhub/internal/models"
	bigmapdiff "github.com/mavryk-network/bcdhub/internal/models/bigmapdiff"
	operation "github.com/mavryk-network/bcdhub/internal/models/operation"
	gomock "go.uber.org/mock/gomock"
)

// MockSaver is a mock of Saver interface.
type MockSaver struct {
	ctrl     *gomock.Controller
	recorder *MockSaverMockRecorder
}

// MockSaverMockRecorder is the mock recorder for MockSaver.
type MockSaverMockRecorder struct {
	mock *MockSaver
}

// NewMockSaver creates a new mock instance.
func NewMockSaver(ctrl *gomock.Controller) *MockSaver {
	mock := &MockSaver{ctrl: ctrl}
	mock.recorder = &MockSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaver) EXPECT() *MockSaverMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockSaver) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockSaverMockRecorder) Commit() *SaverCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockSaver)(nil).Commit))
	return &SaverCommitCall{Call: call}
}

// SaverCommitCall wrap *gomock.Call
type SaverCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SaverCommitCall) Return(arg0 error) *SaverCommitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SaverCommitCall) Do(f func() error) *SaverCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SaverCommitCall) DoAndReturn(f func() error) *SaverCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteAll mocks base method.
func (m *MockSaver) DeleteAll(ctx context.Context, model any, level int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, model, level)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockSaverMockRecorder) DeleteAll(ctx, model, level any) *SaverDeleteAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockSaver)(nil).DeleteAll), ctx, model, level)
	return &SaverDeleteAllCall{Call: call}
}

// SaverDeleteAllCall wrap *gomock.Call
type SaverDeleteAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SaverDeleteAllCall) Return(arg0 error) *SaverDeleteAllCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SaverDeleteAllCall) Do(f func(context.Context, any, int64) error) *SaverDeleteAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SaverDeleteAllCall) DoAndReturn(f func(context.Context, any, int64) error) *SaverDeleteAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteBigMapState mocks base method.
func (m *MockSaver) DeleteBigMapState(ctx context.Context, state bigmapdiff.BigMapState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBigMapState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBigMapState indicates an expected call of DeleteBigMapState.
func (mr *MockSaverMockRecorder) DeleteBigMapState(ctx, state any) *SaverDeleteBigMapStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBigMapState", reflect.TypeOf((*MockSaver)(nil).DeleteBigMapState), ctx, state)
	return &SaverDeleteBigMapStateCall{Call: call}
}

// SaverDeleteBigMapStateCall wrap *gomock.Call
type SaverDeleteBigMapStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SaverDeleteBigMapStateCall) Return(arg0 error) *SaverDeleteBigMapStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SaverDeleteBigMapStateCall) Do(f func(context.Context, bigmapdiff.BigMapState) error) *SaverDeleteBigMapStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SaverDeleteBigMapStateCall) DoAndReturn(f func(context.Context, bigmapdiff.BigMapState) error) *SaverDeleteBigMapStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContractsLastAction mocks base method.
func (m *MockSaver) GetContractsLastAction(ctx context.Context, addressIds ...int64) ([]models.LastAction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range addressIds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContractsLastAction", varargs...)
	ret0, _ := ret[0].([]models.LastAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractsLastAction indicates an expected call of GetContractsLastAction.
func (mr *MockSaverMockRecorder) GetContractsLastAction(ctx any, addressIds ...any) *SaverGetContractsLastActionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, addressIds...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractsLastAction", reflect.TypeOf((*MockSaver)(nil).GetContractsLastAction), varargs...)
	return &SaverGetContractsLastActionCall{Call: call}
}

// SaverGetContractsLastActionCall wrap *gomock.Call
type SaverGetContractsLastActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SaverGetContractsLastActionCall) Return(arg0 []models.LastAction, arg1 error) *SaverGetContractsLastActionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SaverGetContractsLastActionCall) Do(f func(context.Context, ...int64) ([]models.LastAction, error)) *SaverGetContractsLastActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SaverGetContractsLastActionCall) DoAndReturn(f func(context.Context, ...int64) ([]models.LastAction, error)) *SaverGetContractsLastActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperations mocks base method.
func (m *MockSaver) GetOperations(ctx context.Context, level int64) ([]operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations", ctx, level)
	ret0, _ := ret[0].([]operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations.
func (mr *MockSaverMockRecorder) GetOperations(ctx, level any) *SaverGetOperationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockSaver)(nil).GetOperations), ctx, level)
	return &SaverGetOperationsCall{Call: call}
}

// SaverGetOperationsCall wrap *gomock.Call
type SaverGetOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SaverGetOperationsCall) Return(arg0 []operation.Operation, arg1 error) *SaverGetOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SaverGetOperationsCall) Do(f func(context.Context, int64) ([]operation.Operation, error)) *SaverGetOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SaverGetOperationsCall) DoAndReturn(f func(context.Context, int64) ([]operation.Operation, error)) *SaverGetOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastDiff mocks base method.
func (m *MockSaver) LastDiff(ctx context.Context, ptr int64, keyHash string, skipRemoved bool) (bigmapdiff.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastDiff", ctx, ptr, keyHash, skipRemoved)
	ret0, _ := ret[0].(bigmapdiff.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastDiff indicates an expected call of LastDiff.
func (mr *MockSaverMockRecorder) LastDiff(ctx, ptr, keyHash, skipRemoved any) *SaverLastDiffCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastDiff", reflect.TypeOf((*MockSaver)(nil).LastDiff), ctx, ptr, keyHash, skipRemoved)
	return &SaverLastDiffCall{Call: call}
}

// SaverLastDiffCall wrap *gomock.Call
type SaverLastDiffCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SaverLastDiffCall) Return(arg0 bigmapdiff.BigMapDiff, arg1 error) *SaverLastDiffCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SaverLastDiffCall) Do(f func(context.Context, int64, string, bool) (bigmapdiff.BigMapDiff, error)) *SaverLastDiffCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SaverLastDiffCall) DoAndReturn(f func(context.Context, int64, string, bool) (bigmapdiff.BigMapDiff, error)) *SaverLastDiffCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Rollback mocks base method.
func (m *MockSaver) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockSaverMockRecorder) Rollback() *SaverRollbackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockSaver)(nil).Rollback))
	return &SaverRollbackCall{Call: call}
}

// SaverRollbackCall wrap *gomock.Call
type SaverRollbackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SaverRollbackCall) Return(arg0 error) *SaverRollbackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SaverRollbackCall) Do(f func() error) *SaverRollbackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SaverRollbackCall) DoAndReturn(f func() error) *SaverRollbackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBigMapState mocks base method.
func (m *MockSaver) SaveBigMapState(ctx context.Context, state bigmapdiff.BigMapState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBigMapState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBigMapState indicates an expected call of SaveBigMapState.
func (mr *MockSaverMockRecorder) SaveBigMapState(ctx, state any) *SaverSaveBigMapStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBigMapState", reflect.TypeOf((*MockSaver)(nil).SaveBigMapState), ctx, state)
	return &SaverSaveBigMapStateCall{Call: call}
}

// SaverSaveBigMapStateCall wrap *gomock.Call
type SaverSaveBigMapStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SaverSaveBigMapStateCall) Return(arg0 error) *SaverSaveBigMapStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SaverSaveBigMapStateCall) Do(f func(context.Context, bigmapdiff.BigMapState) error) *SaverSaveBigMapStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SaverSaveBigMapStateCall) DoAndReturn(f func(context.Context, bigmapdiff.BigMapState) error) *SaverSaveBigMapStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StatesChangedAtLevel mocks base method.
func (m *MockSaver) StatesChangedAtLevel(ctx context.Context, level int64) ([]bigmapdiff.BigMapState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatesChangedAtLevel", ctx, level)
	ret0, _ := ret[0].([]bigmapdiff.BigMapState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatesChangedAtLevel indicates an expected call of StatesChangedAtLevel.
func (mr *MockSaverMockRecorder) StatesChangedAtLevel(ctx, level any) *SaverStatesChangedAtLevelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatesChangedAtLevel", reflect.TypeOf((*MockSaver)(nil).StatesChangedAtLevel), ctx, level)
	return &SaverStatesChangedAtLevelCall{Call: call}
}

// SaverStatesChangedAtLevelCall wrap *gomock.Call
type SaverStatesChangedAtLevelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SaverStatesChangedAtLevelCall) Return(arg0 []bigmapdiff.BigMapState, arg1 error) *SaverStatesChangedAtLevelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SaverStatesChangedAtLevelCall) Do(f func(context.Context, int64) ([]bigmapdiff.BigMapState, error)) *SaverStatesChangedAtLevelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SaverStatesChangedAtLevelCall) DoAndReturn(f func(context.Context, int64) ([]bigmapdiff.BigMapState, error)) *SaverStatesChangedAtLevelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateContractStats mocks base method.
func (m *MockSaver) UpdateContractStats(ctx context.Context, accountId int64, lastAction time.Time, txCount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContractStats", ctx, accountId, lastAction, txCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContractStats indicates an expected call of UpdateContractStats.
func (mr *MockSaverMockRecorder) UpdateContractStats(ctx, accountId, lastAction, txCount any) *SaverUpdateContractStatsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContractStats", reflect.TypeOf((*MockSaver)(nil).UpdateContractStats), ctx, accountId, lastAction, txCount)
	return &SaverUpdateContractStatsCall{Call: call}
}

// SaverUpdateContractStatsCall wrap *gomock.Call
type SaverUpdateContractStatsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SaverUpdateContractStatsCall) Return(arg0 error) *SaverUpdateContractStatsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SaverUpdateContractStatsCall) Do(f func(context.Context, int64, time.Time, int64) error) *SaverUpdateContractStatsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SaverUpdateContractStatsCall) DoAndReturn(f func(context.Context, int64, time.Time, int64) error) *SaverUpdateContractStatsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
